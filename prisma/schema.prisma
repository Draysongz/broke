// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  tgId String @unique
  username String
  brokeStatus String?
  lastBrokeCheck DateTime?
  brokeTokens Int @default(0)
  leaderboardPoints Int @default(0)
  lastStatusMessageId String?
  solanaAddress String?
  activities Activity[]
  reactions Reaction[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reaction {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  messageId String
  reactorId String
  user User @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([messageId, reactorId, userId])
}

model Activity {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id])
  type String  // e.g., "daily_check", "reaction", "rumble_win", "roulette", "withdraw"
  action String // e.g., "earned", "lost", "won", "withdrew"
  amount Int   // points earned/lost
  previousBalance Int // User's balance before the activity
  newBalance Int     // User's balance after the activity
  metadata Json?    // Additional details
  createdAt DateTime @default(now())
}

